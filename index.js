// Seelenpfote ‚Äì kompletter Bot: 100% OpenAI-gest√ºtzt (Text + Bilder) mit empathischem Emoji-Stil
// CommonJS, Telegraf + OpenAI (Vision). Long Polling (Webhook deaktiviert).

const { Telegraf } = require('telegraf');
const OpenAI = require('openai');

const BOT_TOKEN = process.env.BOT_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

if (!BOT_TOKEN) {
  console.error('Fehlt: BOT_TOKEN (Telegram BotFather Token)');
  process.exit(1);
}
if (!OPENAI_API_KEY) {
  console.error('Fehlt: OPENAI_API_KEY (OpenAI API Key)');
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);
const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

// ===== Gespr√§chsspeicher pro Nutzer =====
// Struktur: Map<userId, OpenAIMessage[]>
const sessions = new Map();

function getSession(userId) {
  if (!sessions.has(userId)) {
    sessions.set(userId, [
      {
        role: 'system',
        content:
          "Du bist 'Seelenpfote', ein einf√ºhlsamer Tier-Begleiter. Sprich warm, beruhigend und menschlich. " +
          "Benutze passende Emojis, um Gef√ºhle sanft zu unterstreichen (z. B. ‚ù§Ô∏è Mitgef√ºhl, üêæ Tiere, üòä Ermutigung, ‚ö†Ô∏è Warnhinweis, üì∏ f√ºr Fotos). " +
          "Halte Antworten klar und nat√ºrlich, ohne unn√∂tigen Fachjargon. " +
          "Gib bei Bedarf einfache, sichere Erste-Hilfe-Hinweise f√ºr Zuhause (niedrigschwellig). " +
          "Zeige bei ernsthaften Anzeichen respektvoll auf, dass eine tier√§rztliche Abkl√§rung sinnvoll ist, ohne Angst zu machen. " +
          "Passe die Sprache an die Nutzerin/den Nutzer an (antworte in der Sprache der letzten Nachricht). " +
          "Wenn Name oder Tiername genannt wurden, sprich die Person bzw. die Fellnase gelegentlich pers√∂nlich an ‚Äì dezent, nicht in jedem Satz. " +
          "Vermeide Wiederholungen ‚Äì best√§tige einmal, dann werde nat√ºrlich."
      }
    ]);
  }
  return sessions.get(userId);
}

async function askOpenAI(userId, userContent) {
  const history = getSession(userId);
  history.push({ role: 'user', content: userContent });

  const resp = await openai.chat.completions.create({
    model: 'gpt-4o-mini',          // Vision-f√§hig, g√ºnstig & schnell
    temperature: 0.5,
    messages: history
  });

  const answer = resp.choices?.[0]?.message?.content?.trim() || 'Entschuldige, mir fehlen gerade Informationen. Magst du es kurz erneut versuchen?';
  history.push({ role: 'assistant', content: answer });
  return answer;
}

// ===== Fehler-Logging =====
bot.catch((err, ctx) => {
  console.error('Bot-Fehler bei Update', ctx.update?.update_id, err);
});

// ===== Start (Begr√º√üung √ºber OpenAI generieren) =====
bot.start(async (ctx) => {
  try {
    const userId = ctx.from.id;
    const intro = "Der Nutzer hat den Chat gestartet. Bitte begr√º√üe warm, kurz und freundlich. Lade ein, etwas √ºber die Fellnase zu erz√§hlen oder ein Foto zu senden. Verwende passende Emojis, aber nicht √ºbertrieben.";
    const answer = await askOpenAI(userId, intro);
    await ctx.reply(answer);
  } catch (e) {
    console.error(e);
    await ctx.reply('Willkommen bei Seelenpfote üêæ ‚Äì ich bin gleich f√ºr dich da.');
  }
});

// ===== Textnachrichten =====
bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const text = (ctx.message.text || '').trim();

  // An OpenAI geben ‚Äì komplette Unterhaltung im Kontext
  try {
    const answer = await askOpenAI(userId, text);
    await ctx.reply(answer);
  } catch (e) {
    console.error(e);
    await ctx.reply('Entschuldige, da ist etwas schiefgelaufen. Versuch es bitte nochmal üôè');
  }
});

// ===== Fotos (Vision) =====
bot.on('photo', async (ctx) => {
  const userId = ctx.from.id;
  try {
    const sizes = ctx.message.photo;
    const best = sizes[sizes.length - 1].file_id;
    const file = await ctx.telegram.getFile(best);
    const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`;

    const history = getSession(userId);
    history.push({
      role: 'user',
      content: [
        { type: 'text', text: "Hier ist ein Foto meiner Fellnase. Bitte beurteile empathisch, was du siehst (z. B. Wunde, R√∂tung, Schwellung) und gib mir liebevolle, klare Hinweise. Nutze passende Emojis." },
        { type: 'image_url', image_url: { url: fileUrl } }
      ]
    });

    const resp = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      temperature: 0.4,
      messages: history
    });

    const answer = resp.choices?.[0]?.message?.content?.trim() || 'Ich konnte das Bild gerade nicht sinnvoll beurteilen. Magst du kurz beschreiben, was dir Sorgen macht?';
    history.push({ role: 'assistant', content: answer });
    await ctx.reply(answer);
  } catch (e) {
    console.error(e);
    await ctx.reply('Das Bild konnte ich gerade nicht auswerten. Magst du es nochmal senden oder kurz beschreiben, was du siehst? üì∏');
  }
});

// ===== Dokumente (z. B. Bild als Datei) =====
bot.on('document', async (ctx) => {
  const userId = ctx.from.id;
  try {
    const fileId = ctx.message.document.file_id;
    const file = await ctx.telegram.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`;

    const history = getSession(userId);
    history.push({
      role: 'user',
      content: [
        { type: 'text', text: "Hier ist eine Datei (vermutlich ein Bild). Bitte beurteile empathisch, was du siehst, und gib klare, sanfte Hinweise. Nutze passende Emojis." },
        { type: 'image_url', image_url: { url: fileUrl } }
      ]
    });

    const resp = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      temperature: 0.4,
      messages: history
    });

    const answer = resp.choices?.[0]?.message?.content?.trim() || 'Ich konnte die Datei nicht sinnvoll beurteilen. Magst du kurz beschreiben, was dir Sorgen macht?';
    history.push({ role: 'assistant', content: answer });
    await ctx.reply(answer);
  } catch (e) {
    console.error(e);
    await ctx.reply('Die Datei konnte ich nicht auswerten. Magst du es mit einem Foto versuchen oder kurz beschreiben, was los ist? üìé');
  }
});

// ===== Starten (Webhook aus -> Polling) =====
(async () => {
  try {
    await bot.telegram.deleteWebhook({ drop_pending_updates: true });
    await bot.launch({ dropPendingUpdates: true });
    console.log('Seelenpfote l√§uft (100% OpenAI, Vision, Polling) üê∂üêæ');
  } catch (e) {
    console.error('Startfehler:', e);
    process.exit(1);
  }
})();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));




