// index.js ‚Äî Seelenpfote Bot (Telegraf) ‚Äî MaxPack v3 (DE/EN auto-detect, no buttons)

const { Telegraf, session } = require('telegraf');

// --- BOT_TOKEN pr√ºfen ---
const TOKEN = process.env.BOT_TOKEN;
if (!TOKEN || TOKEN.trim().length < 30) {
  console.error('‚ùå BOT_TOKEN fehlt/ung√ºltig.');
  process.exit(1);
}
const bot = new Telegraf(TOKEN.trim());

// ----------------- Safety & Sessions -----------------
bot.catch((err) => console.error('‚ö†Ô∏è Bot-Fehler:', err));
bot.use((ctx, next) => { if (!ctx.session) ctx.session = {}; return next(); });
bot.use(session());

// ----------------- Language utils -----------------
function detectLangFromText(txt) {
  if (!txt) return null;
  const t = txt.toLowerCase();
  const enHits = /(hello|hi|hey|dog|cat|vomit|diarrh|help|first aid|next steps|poison|heatstroke|bleeding)/i.test(t);
  const deHits = /(hallo|moin|hund|katze|erbrechen|durchfall|hilfe|erste hilfe|n√§chste schritte|vergift|hitzschlag|blutung)/i.test(t);
  if (enHits && !deHits) return 'en';
  if (deHits && !enHits) return 'de';
  return null;
}
function normalizeLang(langCode) {
  if (!langCode) return 'de';
  const lc = String(langCode).toLowerCase();
  if (lc.startsWith('de')) return 'de';
  if (lc.startsWith('en')) return 'en';
  return 'de';
}
function ensureProfile(ctx) {
  if (!ctx.session) ctx.session = {};
  if (!ctx.session.profile) {
    ctx.session.profile = {
      id: ctx.from?.id,
      name: ctx.from?.first_name || 'Freund',
      lang: normalizeLang(ctx.from?.language_code),
      pet: null,              // 'Hund' | 'Katze' | 'Dog' | 'Cat' (nur Anzeige)
      lastIssue: null,        // Themen-Schl√ºssel
      lastPhotoTs: null,
      state: 'idle',          // 'idle' | 'await_details' | 'await_profile'
      details: {},            // since, pain, feverVomiting, behavior, age, weight
    };
  }
  return ctx.session.profile;
}
function setState(p, next) {
  if (p.state !== next) {
    console.log(`üîÑ STATE: ${p.state} -> ${next}`);
    p.state = next;
  }
}
function setLangByContext(ctx, p, maybeText) {
  // Priorit√§t: explizit gesetzte Sprache via /language > Text-Erkennung > Telegram language_code
  const auto = detectLangFromText(maybeText);
  if (auto && auto !== p.lang) p.lang = auto;
}

// ----------------- Texte DE/EN -----------------
const TXT = {
  welcome: {
    de: (name)=>`üêæ Hallo ${name}! Sch√∂n, dass du da bist. Ich bin *Seelenpfote* ‚Äì ruhig, herzlich und an deiner Seite.\nErz√§hl mir einfach, was los ist. Wenn‚Äôs hilft, schick mir gern ein *Foto*.`,
    en: (name)=>`üêæ Hi ${name}! I‚Äôm *Seelenpfote* ‚Äì calm, caring, and here for you.\nTell me what‚Äôs going on. You can also send a *photo* if helpful.`
  },
  askPet: {
    de: `Hast du einen *Hund* oder eine *Katze*? Antworte mit ‚ÄûHund‚Äú oder ‚ÄûKatze‚Äú.`,
    en: `Do you have a *dog* or a *cat*? Reply with ‚Äúdog‚Äù or ‚Äúcat‚Äù.`
  },
  helpCmd: {
    de: (name)=>`So laufen wir zusammen, ${name}:\n1) Du beschreibst kurz das Thema (z. B. ‚Äûhumpelt‚Äú, ‚ÄûDurchfall‚Äú, ‚Äûetwas Giftiges gefressen‚Äú).\n2) Gern Foto/Video dazu.\n3) Ich gebe dir *Erste Schritte* & *ruhige Orientierung*.\n\n‚ö†Ô∏è Ich *ersetze keinen Tierarzt*. Bei Atemnot, starken Schmerzen, Kr√§mpfen oder Kollaps bitte sofort Notdienst.`,
    en: (name)=>`Here‚Äôs how we work, ${name}:\n1) Briefly describe the issue (e.g., ‚Äúlimping‚Äù, ‚Äúdiarrhea‚Äù, ‚Äúate something toxic‚Äù).\n2) Add a photo/video if you can.\n3) I‚Äôll give you *first aid steps* and *calm guidance*.\n\n‚ö†Ô∏è I do *not* replace a vet. If breathing trouble, severe pain, seizures, or collapse: emergency vet NOW.`
  },
  sosCmd: {
    de: `Wenn es dringend wirkt: ruhig atmen, Tier sichern, warm halten (nicht √ºberhitzen).\n‚Ä¢ Starke Blutung: *sanfter Druck* mit sauberem Tuch\n‚Ä¢ Vergiftung: *kein* Erbrechen ausl√∂sen, Verpackung sichern\n‚Ä¢ Hitzschlag: Schatten, Pfoten/Brust *lauwarm* k√ºhlen\n‚Ä¢ Atemnot/Kollaps/Krampf: *sofort* Notdienst\n\nSchreib mir das *Hauptproblem*, ich helfe dir direkt.`,
    en: `If it feels urgent: stay calm, secure your pet, keep warm (not overheated).\n‚Ä¢ Heavy bleeding: *gentle pressure* with clean cloth\n‚Ä¢ Poisoning: *do not* induce vomiting, keep packaging\n‚Ä¢ Heatstroke: shade, *lukewarm* cooling of paws/chest\n‚Ä¢ Breathing trouble/collapse/seizure: emergency vet NOW\n\nTell me the *main problem* and I‚Äôll guide you.`
  },
  contact: {
    de: `üì® E-Mail: info@seelenpfote.app\nüì∏ Instagram: @seelenpfote.app`,
    en: `üì® Email: info@seelenpfote.app\nüì∏ Instagram: @seelenpfote.app`
  },
  privacy: {
    de: `üîí Kurzfassung: Ich speichere nur, was n√∂tig ist. Details: https://www.seelenpfote.app/#Datenschutz`,
    en: `üîí Short version: I only store what‚Äôs necessary. Details: https://www.seelenpfote.app/#Datenschutz`
  },
  photoQs: {
    de: (name,pet)=>`Danke f√ºrs Bild, ${name}. Magst du mir kurz sagen:\n‚Ä¢ Seit wann?\n‚Ä¢ Schmerzen (ja/nein)?\n‚Ä¢ Fieber/Erbrechen?\n‚Ä¢ Verhalten ver√§ndert?\n${pet ? `(Tier: ${pet})` : ''}`,
    en: (name,pet)=>`Thanks for the photo, ${name}. Could you tell me:\n‚Ä¢ Since when?\n‚Ä¢ Pain (yes/no)?\n‚Ä¢ Fever/vomiting?\n‚Ä¢ Behavior changed?\n${pet ? `(Pet: ${pet})` : ''}`
  },
  askProfile: {
    de: `Danke dir. Jetzt bitte *Alter, Gewicht und seit wann* (z. B. ‚Äû6 Jahre, 9.5 kg, seit 1 Woche‚Äú).`,
    en: `Thank you. Now please share *age, weight, and since when* (e.g., ‚Äú6 years, 9.5 kg, since 1 week‚Äù).`
  },
  summaryLead: {
    de: (name)=>`Danke, ${name}. Ich habe verstanden:`,
    en: (name)=>`Thanks, ${name}. Here‚Äôs what I understood:`
  },
  summaryBullets: {
    de: { pet:'‚Ä¢ Tier: ', issue:'‚Ä¢ Thema: ', since:'‚Ä¢ Seit: ', pain:'‚Ä¢ Schmerzen: ', fever:'‚Ä¢ Fieber/Erbrechen: ', weight:'‚Ä¢ Gewicht: ', age:'‚Ä¢ Alter (ca.): ' },
    en: { pet:'‚Ä¢ Pet: ', issue:'‚Ä¢ Issue: ', since:'‚Ä¢ Since: ', pain:'‚Ä¢ Pain: ', fever:'‚Ä¢ Fever/Vomiting: ', weight:'‚Ä¢ Weight: ', age:'‚Ä¢ Age (approx): ' }
  },
  summaryTail: {
    de: `\nWenn du bereit bist, schreib einfach *‚Äûerste hilfe‚Äú*, *‚Äûn√§chsten schritte‚Äú* oder *‚Äûwas tun‚Äú* ‚Äì ich f√ºhre dich liebevoll hindurch.`,
    en: `\nWhen ready, just type *‚Äúfirst aid‚Äù*, *‚Äúnext steps‚Äù* or *‚Äúwhat to do‚Äù* ‚Äî I‚Äôll guide you gently.`
  },
  fallback: {
    de: (name)=>`Danke, ${name}. Wenn du magst, sag mir *Alter, Gewicht und seit wann* ‚Äì oder beschreibe das *Hauptproblem* (z. B. ‚Äûvergiftung‚Äú, ‚Äûhitzschlag‚Äú, ‚Äûhumpelt‚Äú, ‚Äûdurchfall‚Äú).`,
    en: (name)=>`Thanks, ${name}. If you like, share *age, weight, and since when* ‚Äî or describe the *main problem* (e.g., ‚Äúpoisoning‚Äù, ‚Äúheatstroke‚Äù, ‚Äúlimping‚Äù, ‚Äúdiarrhea‚Äù).`
  }
};

// ----------------- Helper (parsing) -----------------
const weightRe = /(\d+[.,]?\d*)\s*(kg|kilo|kilogramm|kilograms?|lbs?)\b/i;
const ageRe    = /(\d+[.,]?\d*)\s*(jahr|jahre|years?|yr|yrs|yo|j)\b/i;
const sinceRe  = /(?:seit|since)\s+([^\n,.!]+)/i;

const parseWeight = (t)=>{ const m=t.match(weightRe); return m?parseFloat(m[1].replace(',','.')):undefined; };
const parseAge    = (t)=>{ const m=t.match(ageRe); if(m) return parseFloat(m[1].replace(',','.')); const m2=t.match(/(\d+[.,]?\d*)/); if(m2){const v=parseFloat(m2[1].replace(',','.')); if(v<=25) return v;} return undefined; };
const parseSince  = (t)=>{ const m=t.match(sinceRe); if(m) return (t.toLowerCase().includes('since')?'since ':'seit ') + m[1].trim(); const m2=t.match(/(\d+)\s*(tag|tage|woche|wochen|monat|monate|day|days|week|weeks|month|months)/i); return m2?`${m2[1]} ${m2[2]}`:undefined; };
const hasYes      = (t)=>/\b(ja|yes|yep|stimmt)\b/i.test(t);
const hasNo       = (t)=>/\b(nein|no|nope|nicht)\b/i.test(t);

// ----------------- Erste-Hilfe-Katalog (DE+EN) -----------------
const INTENTS = [
  // Heat / Cold / Energy
  { key:'heatstroke',
    regex:/(hitzschlag|ueberhitzt|√ºberhitzt|too\s*hot|overheat|heatstroke|pant.*extreme)/i,
    text:{ de:`ü•µ *Hitzschlag/√úberhitzung*\n‚Ä¢ Sofort Schatten/k√ºhl, L√ºften\n‚Ä¢ Pfoten/Brust *lauwarm* befeuchten (nicht eiskalt)\n‚Ä¢ Wasser anbieten, nicht erzwingen\n‚Ä¢ >40¬∞C kritisch ‚Üí *sofort Tierarzt*`,
           en:`ü•µ *Heatstroke/Overheating*\n‚Ä¢ Move to shade/cool air\n‚Ä¢ Wet paws/chest with *lukewarm* water (not ice-cold)\n‚Ä¢ Offer water, don‚Äôt force\n‚Ä¢ >104¬∞F/40¬∞C is critical ‚Üí *vet immediately*`}},
  { key:'hypothermia_frost',
    regex:/(unterk[√ºu]hlung|frost|very\s*cold|hypotherm|shiver)/i,
    text:{ de:`üßä *Unterk√ºhlung/Frost*\n‚Ä¢ Langsam aufw√§rmen (Decke/K√∂rperw√§rme), gut trocknen\n‚Ä¢ Keine direkte Hitze/kein hei√ües Wasser\n‚Ä¢ Apathie/steifer Gang/wei√üe Ohr-/Schwanzspitzen ‚Üí *Tierarzt*`,
           en:`üßä *Hypothermia/Frost*\n‚Ä¢ Warm up slowly (blanket/body heat), dry well\n‚Ä¢ No direct heat or hot water\n‚Ä¢ Lethargy, stiff gait, pale tips ‚Üí *see a vet*`}},
  { key:'hypoglycemia',
    regex:/(unterzucker|low\s*blood\s*sugar|hypoglyc|puppy.*weak|toy\s*breed.*weak)/i,
    text:{ de:`üç¨ *Unterzucker (v. a. Welpe/Minirasse)*\n‚Ä¢ Bei Bewusstsein: etwas Honig/Glukose am Zahnfleisch (nicht erzwingen)\n‚Ä¢ Warm halten ‚Üí *Tierarzt*`,
           en:`üç¨ *Hypoglycemia (esp. puppies/toy breeds)*\n‚Ä¢ If conscious: rub a bit of honey/glucose on gums (don‚Äôt force)\n‚Ä¢ Keep warm ‚Üí *see a vet*`}},
  // Poison / Foreign body / GI
  { key:'poison',
    regex:/(vergift|giftig|k√∂der|koeder|rattengift|schokolade|xylit|xylitol|grapes?|raisins?|antifreeze|pesticide|nikotin|nicotine|poison|toxic|ate\s*medicine|medikament.*gefressen)/i,
    text:{ de:`‚ò†Ô∏è *Vergiftungsverdacht*\n‚Ä¢ *Kein* Erbrechen ausl√∂sen\n‚Ä¢ Stoff/Verpackung sichern\n‚Ä¢ Aktivkohle nur nach R√ºcksprache\n‚Ä¢ *Sofort Tierarzt/Notdienst*`,
           en:`‚ò†Ô∏è *Suspected poisoning*\n‚Ä¢ *Do not* induce vomiting\n‚Ä¢ Keep product/packaging\n‚Ä¢ Activated charcoal only after vet advice\n‚Ä¢ *Emergency vet immediately*`}},
  { key:'foreign_body',
    regex:/(fremdk√∂rper.*(gefressen|verschluckt)|socke|sock|stein|stone|bone\s*swallowed|toy\s*(swallowed|ingested))/i,
    text:{ de:`üßµ *Fremdk√∂rper verschluckt*\n‚Ä¢ Nicht f√ºttern/tr√§nken\n‚Ä¢ Kein Erbrechen provozieren\n‚Ä¢ Faden/Leine *nie* ziehen!\n‚Ä¢ *Zeitnah Tierarzt* (R√∂ntgen/US n√∂tig)`,
           en:`üßµ *Foreign body swallowed*\n‚Ä¢ No food/water\n‚Ä¢ Do not induce vomiting\n‚Ä¢ Never pull strings/threads!\n‚Ä¢ *See a vet soon* (X-ray/ultrasound)`}},
  { key:'vomiting',
    regex:/(erbrechen|brechen|vomit|throwing\s*up)/i,
    text:{ de:`ü§¢ *Erbrechen*\n‚Ä¢ 6‚Äì12 h Futterpause, Wasser anbieten\n‚Ä¢ Dann kleine leicht verdauliche Portionen\n‚Ä¢ H√§ufig/blutig/Fieber/Apathie/Welpe/Senior ‚Üí *Tierarzt*`,
           en:`ü§¢ *Vomiting*\n‚Ä¢ Withhold food 6‚Äì12 h, offer water\n‚Ä¢ Then small bland meals\n‚Ä¢ Frequent/bloody/fever/lethargy/puppy/senior ‚Üí *vet*`}},
  { key:'diarrhea',
    regex:/(durchfall|diarrh(ea)?)/i,
    text:{ de:`ü•£ *Durchfall*\n‚Ä¢ Wasser bereitstellen, Schonkost in Miniportionen 12‚Äì24 h\n‚Ä¢ Kein Fett/Leckerlis\n‚Ä¢ Blutig/Fieber/Apathie/Erbrechen oder >24‚Äì48 h ‚Üí *Tierarzt*`,
           en:`ü•£ *Diarrhea*\n‚Ä¢ Provide water, bland diet in small portions 12‚Äì24 h\n‚Ä¢ No fatty food/treats\n‚Ä¢ Bloody/fever/lethargy/vomiting or >24‚Äì48 h ‚Üí *vet*`}},
  { key:'constipation',
    regex:/(verstopfung|constipat|hard\s*stool|straining\s*no\s*poop)/i,
    text:{ de:`üöΩ *Verstopfung*\n‚Ä¢ Kein hartes Dr√ºcken provozieren, keine Hausmittel\n‚Ä¢ Wasser anbieten, sanfte Bewegung\n‚Ä¢ Schmerz, Lethargie, Erbrechen oder >24‚Äì48 h ‚Üí *Tierarzt*`,
           en:`üöΩ *Constipation*\n‚Ä¢ Don‚Äôt force bowel movements, avoid home meds\n‚Ä¢ Offer water, gentle movement\n‚Ä¢ Pain, lethargy, vomiting or >24‚Äì48 h ‚Üí *vet*`}},
  { key:'pancreatitis',
    regex:/(pankreatitis|pancreatitis|abdominal\s*pain.*fat|after\s*fatty\s*meal|fettiges\s*futter)/i,
    text:{ de:`üî• *Pankreatitis-Verdacht*\n‚Ä¢ Bauchschmerz, Erbrechen, Mattigkeit nach *fettem Futter*\n‚Ä¢ Schonkost wenig, Wasser\n‚Ä¢ *Tierarzt* (Schmerz/Infusion m√∂glich)`,
           en:`üî• *Pancreatitis (suspected)*\n‚Ä¢ Abdominal pain, vomiting, lethargy after *fatty meal*\n‚Ä¢ Bland diet small portions, water\n‚Ä¢ *Vet* (pain relief/fluids may be needed)`}},
  { key:'bloat_gdv',
    regex:/(aufgebl[a√§]ht|bloat|gdv|distend.*abdomen|hard\s*belly|unsuccessful\s*retch)/i,
    text:{ de:`üö® *Magendrehung (Hund) ‚Äì Verdacht*\n‚Ä¢ Aufgebl√§hter harter Bauch, erfolgloses W√ºrgen, Unruhe\n‚Ä¢ Nicht f√ºttern/tr√§nken ‚Üí *sofort* Notdienst (zeitkritisch)`,
           en:`üö® *Gastric dilatation/volvulus (dog) suspected*\n‚Ä¢ Hard distended belly, unproductive retching, restlessness\n‚Ä¢ No food/water ‚Üí *emergency vet now* (time critical)`}},
  { key:'dehydration',
    regex:/(dehydriert|dehydrated|dry\s*gums|skin\s*tent|drinks?\s*little)/i,
    text:{ de:`üíß *Dehydrierung*\n‚Ä¢ H√§ufig kleine Wassermengen anbieten\n‚Ä¢ Lethargie, trockene Schleimh√§ute, stehende Hautfalte ‚Üí *Tierarzt* (Infusion)`,
           en:`üíß *Dehydration*\n‚Ä¢ Offer small amounts of water frequently\n‚Ä¢ Lethargy, dry gums, skin tent ‚Üí *vet* (fluids)`}},
  // Trauma / Wunden / Z√§hne
  { key:'wound_limp',
    regex:/(wunde|schnitt|cut|laceration|humpel|limp|lame|paw\s*(cut|injured))/i,
    text:{ de:`ü©π *Wunde/Humpeln*\n‚Ä¢ Lauwarm sp√ºlen, *Druck* bei Blutung\n‚Ä¢ Lecken verhindern (Body/Kragen), ruhig halten\n‚Ä¢ Tiefe/verschmutzte Wunden ‚Üí *Tierarzt*\n‚Ä¢ Lahmheit/Schwellung >24‚Äì48 h ‚Üí *Tierarzt*`,
           en:`ü©π *Wound/Limp*\n‚Ä¢ Rinse with lukewarm water, *gentle pressure* if bleeding\n‚Ä¢ Prevent licking (cone/shirt), rest\n‚Ä¢ Deep/contaminated wounds ‚Üí *vet*\n‚Ä¢ Lameness/swelling >24‚Äì48 h ‚Üí *vet*`}},
  { key:'bite_wound',
    regex:/(biss|bite\s*wound|dog\s*bite|cat\s*bite|fight)/i,
    text:{ de:`ü¶∑ *Bissverletzung*\n‚Ä¢ Kleine L√∂cher = tiefe Taschen m√∂glich ‚Üí Infektionsrisiko\n‚Ä¢ Sp√ºlen (lauwarm), sauber abdecken, ruhig halten\n‚Ä¢ *Tierarzt* (Reinigung, ggf. AB/Drainage)`,
           en:`ü¶∑ *Bite wound*\n‚Ä¢ Small holes can hide deep pockets ‚Üí infection risk\n‚Ä¢ Rinse lukewarm, cover cleanly, rest\n‚Ä¢ *Vet* (cleaning, possible antibiotics/drain)`}},
  { key:'dental_fracture',
    regex:/(zahn.*abgebrochen|tooth\s*(fracture|broken))/i,
    text:{ de:`ü¶∑ *Zahn abgebrochen*\n‚Ä¢ Schmerz m√∂glich; Speicheln/Blut\n‚Ä¢ Kein hartes Futter/Kauartikel\n‚Ä¢ *Zeitnah Tier(zahn)arzt* (Pulpa offen? Entz√ºndungsgefahr)`,
           en:`ü¶∑ *Tooth fracture*\n‚Ä¢ Pain possible; drooling/blood\n‚Ä¢ No hard food/chews\n‚Ä¢ *See (dental) vet soon* (pulp exposure risk)`}},
  // Airways / Neuro / Electric / Drowning
  { key:'choking',
    regex:/(erstick|chok(e|ing)|object\s*stuck|w√ºrg|wuerg|keuch|breath\s*hard)/i,
    text:{ de:`ü´Å *Erstickungsverdacht/Fremdk√∂rper*\n‚Ä¢ Sichtbar lockeres vorsichtig entfernen (nicht stechen)\n‚Ä¢ Keine blinden Tiefgriffe\n‚Ä¢ Kleine Hunde: 5√ó R√ºckenschl√§ge zw. Schultern, im Wechsel mit Brustkompressionen\n‚Ä¢ *Sofort Tierarzt* bei Atemnot`,
           en:`ü´Å *Choking/foreign body*\n‚Ä¢ Remove only *visible loose* objects (no probing)\n‚Ä¢ No blind deep grabs\n‚Ä¢ Small dogs: 5 firm back blows between shoulders, alternate with chest compressions\n‚Ä¢ *Vet immediately* if breathing difficulty persists`}},
  { key:'seizure',
    regex:/(krampf|seizure|epilep)/i,
    text:{ de:`‚ö° *Krampfanfall*\n‚Ä¢ Nicht festhalten, nichts ins Maul, Umgebung sichern\n‚Ä¢ Zeit messen (>3‚Äì5 min/Cluster = kritisch)\n‚Ä¢ Danach ruhig, warm halten\n‚Ä¢ *Sofort Tierarzt* bei erstem Anfall/ >3‚Äì5 min/mehreren Anf√§llen`,
           en:`‚ö° *Seizure*\n‚Ä¢ Don‚Äôt restrain, nothing in mouth, make area safe\n‚Ä¢ Time it (>3‚Äì5 min/cluster = critical)\n‚Ä¢ Afterwards keep calm and warm\n‚Ä¢ *Emergency vet* for first seizure/>3‚Äì5 min/multiple`}},
  { key:'near_drowning',
    regex:/(beinahe.*ertrunken|near\s*drown|inhaled\s*water)/i,
    text:{ de:`üåä *Beinahe-Ertrinken*\n‚Ä¢ Ruhig, w√§rmen\n‚Ä¢ Kopf/Brust leicht tiefer, wenn Wasser austritt\n‚Ä¢ Anhaltende Atemnot/Husten/Blauf√§rbung ‚Üí *sofort Tierarzt*`,
           en:`üåä *Near drowning*\n‚Ä¢ Keep calm and warm\n‚Ä¢ Slightly lower head/chest if water drains\n‚Ä¢ Ongoing breathing issues/cough/blue gums ‚Üí *emergency vet*`}},
  { key:'electric_shock',
    regex:/(stromschlag|electric\s*shock|chewed\s*cable)/i,
    text:{ de:`‚ö° *Stromschlag*\n‚Ä¢ Stromquelle trennen, erst dann anfassen\n‚Ä¢ Maulverbrennungen m√∂glich ‚Üí ruhig beobachten\n‚Ä¢ Atemnot, Apathie, Krampf ‚Üí *sofort Tierarzt*`,
           en:`‚ö° *Electric shock*\n‚Ä¢ Disconnect power before touching\n‚Ä¢ Mouth burns possible ‚Üí monitor\n‚Ä¢ Breathing trouble, lethargy, seizures ‚Üí *emergency vet*`}},
  // Urogenital / Birth
  { key:'urinary_block',
    regex:/(kater.*nicht.*urin|urinary\s*block|straining\s*no\s*urine|blocked\s*tom)/i,
    text:{ de:`üö® *Harnr√∂hrenverschluss (v. a. Kater)*\n‚Ä¢ H√§ufiges Pressen ohne Urin, Schmerz, Laut√§u√üerung\n‚Ä¢ *Sofort* Notdienst ‚Äì lebensbedrohlich`,
           en:`üö® *Urethral blockage (esp. male cats)*\n‚Ä¢ Repeated straining with little/no urine, pain, vocalizing\n‚Ä¢ *Emergency vet now* ‚Äî life-threatening`}},
  { key:'pyometra',
    regex:/(pyometra|eitergeb√§rmutter|geb√§rmutterentz√ºndung|uterus\s*infection)/i,
    text:{ de:`üö® *Geb√§rmuttervereiterung*\n‚Ä¢ Matt, Fieber, Durst, evtl. eitriger Ausfluss\n‚Ä¢ *Sofort Tierarzt* (oft OP/Intensiv)`,
           en:`üö® *Pyometra*\n‚Ä¢ Lethargy, fever, thirst, possible pus discharge\n‚Ä¢ *Emergency vet* (often surgery/IV needed)`}},
  { key:'whelping',
    regex:/(geburt|wehen|whelp(ing)?|in\s*labour|labor)/i,
    text:{ de:`üë∂ *Geburt/Wehen*\n‚Ä¢ Pausen zw. Welpen bis ~2 h normal\n‚Ä¢ Pressen >20‚Äì30 min ohne Welpe, stinkender Ausfluss, Welpe steckt ‚Üí *sofort Notdienst*\n‚Ä¢ Warm, ruhig, saubere T√ºcher`,
           en:`üë∂ *Whelping/Labour*\n‚Ä¢ Gaps up to ~2 h between pups can be normal\n‚Ä¢ Straining >20‚Äì30 min without pup, foul discharge, stuck pup ‚Üí *emergency vet*\n‚Ä¢ Keep warm, calm, clean towels`}},
  // Allergy / Skin / Eyes / Ears / Ticks
  { key:'allergy_anaphylaxis',
    regex:/(allerg|anaphy|swollen\s*face|gesicht\s*geschwollen|hives|quaddeln|sting.*reaction)/i,
    text:{ de:`ü§ß *Allergische Reaktion*\n‚Ä¢ Leicht: k√ºhlen\n‚Ä¢ Gesicht/Kehlkopf-Schwellung, Atemnot ‚Üí *sofort Notdienst*\n‚Ä¢ Keine Human-Antihistaminika ohne R√ºcksprache`,
           en:`ü§ß *Allergic reaction*\n‚Ä¢ Mild: cool compress\n‚Ä¢ Facial/throat swelling, breathing trouble ‚Üí *emergency vet*\n‚Ä¢ No human antihistamines without vet advice`}},
  { key:'eye_injury',
    regex:/(auge.*verletz|eye\s*(injury|ulcer|red|discharge|foreign))/i,
    text:{ de:`üëÅÔ∏è *Augenproblem*\n‚Ä¢ Nicht reiben lassen (Kragen), Licht meiden\n‚Ä¢ Keine Salben ohne Diagnose\n‚Ä¢ Schmerz, Eiter, Tr√ºbung, Fremdk√∂rper ‚Üí *zeitnah Tierarzt*`,
           en:`üëÅÔ∏è *Eye problem*\n‚Ä¢ Prevent rubbing (cone), avoid bright light\n‚Ä¢ No ointments without diagnosis\n‚Ä¢ Pain, discharge, cloudiness, foreign body ‚Üí *see a vet promptly*`}},
  { key:'ear_infection',
    regex:/(ohr.*entz√ºndung|ear\s*infection|head\s*shaking|kopfsch√ºtteln|othaemat|oth[a√§]matom|aural\s*hematoma)/i,
    text:{ de:`üëÇ *Ohrproblem*\n‚Ä¢ Sch√ºtteln/Juckreiz, evtl. Geruch\n‚Ä¢ Nicht tief reinigen, nichts eintr√§ufeln\n‚Ä¢ Blutblase (Oth√§matom) ‚Üí *Tierarzt*`,
           en:`üëÇ *Ear problem*\n‚Ä¢ Head shaking/itching, possible odor\n‚Ä¢ Don‚Äôt deep-clean or add drops\n‚Ä¢ Aural hematoma ‚Üí *vet*`}},
  { key:'tick_foxtail',
    regex:/(zecke|tick|foxtail|grassamen|grasfahne|foreign\s*body\s*(paw|nose|ear))/i,
    text:{ de:`ü™≤ *Zecke/Fremdk√∂rper*\n‚Ä¢ Zecke hautnah mit Karte/Zange *gerade* ziehen (nicht quetschen)\n‚Ä¢ Grasfahne in Nase/Ohr/Pfote ‚Üí *Tierarzt* (nicht stochern)`,
           en:`ü™≤ *Tick/foxtail foreign body*\n‚Ä¢ Remove tick close to skin with tool *straight out* (don‚Äôt crush)\n‚Ä¢ Foxtail in nose/ear/paw ‚Üí *vet* (don‚Äôt probe)`}},
  // Burns / Chemicals / Blunt trauma
  { key:'burns_chemical',
    regex:/(verbrennung|burn|scald|chemical|ver√§tzt|veraetzt|acid|alkali|laugen)/i,
    text:{ de:`üî• *Verbrennung/Ver√§tzung*\n‚Ä¢ Quelle entfernen; 10‚Äì15 min *lauwarm* k√ºhlen (nicht eiskalt)\n‚Ä¢ Chemikalie: *lange* sp√ºlen, Handschutz\n‚Ä¢ Keine Salben/√ñle; steril abdecken\n‚Ä¢ Je nach Ausma√ü *Tierarzt*`,
           en:`üî• *Burn/Chemical exposure*\n‚Ä¢ Remove source; cool *lukewarm* 10‚Äì15 min (not ice)\n‚Ä¢ Chemicals: flush thoroughly, protect your hands\n‚Ä¢ No creams/oils; cover sterile\n‚Ä¢ See a vet depending on severity`}},
  { key:'blunt_trauma',
    regex:/(angefahren|hit\s*by\s*car|fallen|sturz|kollision|collision|autounfall|kicked)/i,
    text:{ de:`ü©∫ *Stumpfes Trauma*\n‚Ä¢ Ruhe, warm halten, Blutungen stillen\n‚Ä¢ Versteckte Innensch√§den m√∂glich (Milz, Lunge)\n‚Ä¢ Apathie, blasse Schleimh√§ute, schneller Puls, Bauchschmerz ‚Üí *sofort Tierarzt*`,
           en:`ü©∫ *Blunt trauma*\n‚Ä¢ Rest, keep warm, control bleeding\n‚Ä¢ Internal injuries possible (spleen, lungs)\n‚Ä¢ Lethargy, pale gums, fast pulse, belly pain ‚Üí *emergency vet*`}},
];

const ISSUE_LABELS = {
  heatstroke:{de:'Hitzschlag/√úberhitzung', en:'Heatstroke/Overheating'},
  hypothermia_frost:{de:'Unterk√ºhlung/Frost', en:'Hypothermia/Frost'},
  hypoglycemia:{de:'Unterzucker', en:'Hypoglycemia'},
  poison:{de:'Vergiftung', en:'Poisoning'},
  foreign_body:{de:'Fremdk√∂rper verschluckt', en:'Foreign body swallowed'},
  vomiting:{de:'Erbrechen', en:'Vomiting'},
  diarrhea:{de:'Durchfall', en:'Diarrhea'},
  constipation:{de:'Verstopfung', en:'Constipation'},
  pancreatitis:{de:'Pankreatitis-Verdacht', en:'Pancreatitis (suspected)'},
  bloat_gdv:{de:'Magendrehung (Hund)', en:'GDV (dog)'},
  dehydration:{de:'Dehydrierung', en:'Dehydration'},
  wound_limp:{de:'Wunde/Humpeln', en:'Wound/Limp'},
  bite_wound:{de:'Bissverletzung', en:'Bite wound'},
  dental_fracture:{de:'Zahn abgebrochen', en:'Tooth fracture'},
  choking:{de:'Erstickungsverdacht', en:'Choking/Foreign body'},
  seizure:{de:'Krampfanfall', en:'Seizure'},
  near_drowning:{de:'Beinahe-Ertrinken', en:'Near drowning'},
  electric_shock:{de:'Stromschlag', en:'Electric shock'},
  urinary_block:{de:'Harnr√∂hrenverschluss (Kater)', en:'Urethral blockage (male cat)'},
  pyometra:{de:'Geb√§rmuttervereiterung', en:'Pyometra'},
  whelping:{de:'Geburt/Wehen', en:'Whelping/Labour'},
  allergy_anaphylaxis:{de:'Allergische Reaktion', en:'Allergic reaction'},
  eye_injury:{de:'Augenproblem', en:'Eye problem'},
  ear_infection:{de:'Ohrenproblem', en:'Ear problem'},
  tick_foxtail:{de:'Zecke/Grasfahne', en:'Tick/Foxtail'},
  burns_chemical:{de:'Verbrennung/Ver√§tzung', en:'Burn/Chemical'},
  blunt_trauma:{de:'Stumpfes Trauma', en:'Blunt trauma'},
};

function firstAidFor(key, lang) {
  const item = INTENTS.find(i => i.key === key);
  if (!item) return null;
  return item.text[lang] || item.text.de;
}

// ----------------- Commands -----------------
bot.command('hilfe', async (ctx) => {
  const p = ensureProfile(ctx);
  setLangByContext(ctx, p, null);
  await ctx.reply(TXT.helpCmd[p.lang](p.name), { parse_mode:'Markdown' });
  setState(p,'idle');
});
bot.command('notfall', async (ctx) => {
  const p = ensureProfile(ctx);
  setLangByContext(ctx, p, null);
  await ctx.reply(TXT.sosCmd[p.lang], { parse_mode:'Markdown' });
  setState(p,'idle');
});
bot.command('kontakt', (ctx) => {
  const p = ensureProfile(ctx); setLangByContext(ctx, p, null);
  return ctx.reply(TXT.contact[p.lang]);
});
bot.command('datenschutz', (ctx) => {
  const p = ensureProfile(ctx); setLangByContext(ctx, p, null);
  return ctx.reply(TXT.privacy[p.lang]);
});
// Manual language switch: /language de  or  /language en
bot.command('language', async (ctx) => {
  const p = ensureProfile(ctx);
  const args = (ctx.message.text || '').split(/\s+/);
  const choice = (args[1] || '').toLowerCase();
  if (choice === 'de' || choice === 'en') {
    p.lang = choice;
    await ctx.reply(choice === 'de'
      ? '‚úÖ Sprache gesetzt: Deutsch.'
      : '‚úÖ Language set to English.'
    );
  } else {
    await ctx.reply('Use: /language de   or   /language en\nBenutze: /language de   oder   /language en');
  }
});

// ----------------- Greetings & Pet type -----------------
const greet = /^(hi|hello|hallo|hey|servus|moin|guten\s*tag|good\s*(morning|evening)|guten\s*(morgen|abend))\b/i;
bot.hears(greet, async (ctx) => {
  const p = ensureProfile(ctx);
  setLangByContext(ctx, p, ctx.message.text);
  await ctx.reply(TXT.welcome[p.lang](p.name), { parse_mode:'Markdown' });
  if (!p.pet) await ctx.reply(TXT.askPet[p.lang], { parse_mode:'Markdown' });
});

bot.hears(/^(hund|dog)$/i, async (ctx)=>{ const p=ensureProfile(ctx); setLangByContext(ctx,p,ctx.message.text); p.pet = (p.lang==='en'?'Dog':'Hund'); await ctx.reply(p.lang==='en'?'Got it: üê∂ *Dog*.':'Alles klar, ich merke mir: üê∂ *Hund*.',{parse_mode:'Markdown'});});
bot.hears(/^(katze|cat)$/i, async (ctx)=>{ const p=ensureProfile(ctx); setLangByContext(ctx,p,ctx.message.text); p.pet = (p.lang==='en'?'Cat':'Katze'); await ctx.reply(p.lang==='en'?'Got it: üê± *Cat*.':'Alles klar, ich merke mir: üê± *Katze*.',{parse_mode:'Markdown'});});

// ----------------- Foto ‚Üí Details -----------------
bot.on('photo', async (ctx) => {
  const p = ensureProfile(ctx);
  setLangByContext(ctx, p, null);
  p.lastPhotoTs = Date.now();
  p.details = {};
  setState(p,'await_details');
  await ctx.reply(TXT.photoQs[p.lang](p.name, p.pet));
});

// ----------------- Text-Flow (FSM + Intents) -----------------
bot.on('text', async (ctx) => {
  const p = ensureProfile(ctx);
  const t = (ctx.message.text || '').trim();
  setLangByContext(ctx, p, t);
  console.log('üì•', p.lang, p.state, '-', ctx.from?.username || ctx.from?.id, ':', t);

  // 1) Gro√üe Themen-Erkennung ‚Üí sofort Erstinfo + Profil abfragen
  for (const it of INTENTS) {
    if (it.regex.test(t)) {
      p.lastIssue = it.key;
      setState(p, 'await_profile');
      await ctx.reply(firstAidFor(p.lastIssue, p.lang) + (p.lang==='en'
        ? `\nIf you can, share *age, weight, and since when* ‚Äî I‚Äôll tailor guidance.`
        : `\nWenn du magst, nenn mir noch *Alter, Gewicht und seit wann* ‚Äì dann kann ich gezielter helfen.`),
        { parse_mode:'Markdown' }
      );
      return;
    }
  }

  // 2) Intent ‚Äûerste hilfe / next steps / weiter / tipps / beobachtung‚Äú
  if (/(erste\s*hilfe|n[a√§]chst\w*\s*schritt\w*|weiter(gehen|e|)\b|was\s*(jetzt|tun)|tipps?|anleitung|beobachtung|first\s*aid|next\s*steps|what\s*to\s*do|advice)/i.test(t)) {
    const txt = firstAidFor(p.lastIssue, p.lang);
    if (txt) {
      await ctx.reply(txt, { parse_mode:'Markdown' });
    } else {
      await ctx.reply(p.lang==='en'
        ? `Sure. Tell me briefly *what it is* (e.g., ‚Äúlimping‚Äù, ‚Äúdiarrhea‚Äù, ‚Äúpoisoning‚Äù, ‚Äúheatstroke‚Äù).`
        : `Gern. Sag mir kurz, *worum* es geht (z. B. ‚Äûhumpelt‚Äú, ‚ÄûDurchfall‚Äú, ‚Äûvergiftung‚Äú, ‚Äûhitzschlag‚Äú).`
      );
    }
    return;
  }

  // 3) Antworten auf Detailfragen nach Foto
  if (p.state === 'await_details') {
    p.details.since = p.details.since || parseSince(t);
    if (p.details.pain === undefined) {
      if (hasYes(t)) p.details.pain = true;
      else if (hasNo(t)) p.details.pain = false;
    }
    if (/(fieber|fever|temperatur|temperature|erbrechen|brechen|vomit)/i.test(t)) {
      p.details.feverVomiting = /kein|keine|ohne|no|none/i.test(t) ? false : true;
    }
    if (/(ruhig|apath|anders|verh√§lt|humpel|lahm|frisst|trinkt|quiet|letharg|not\s*eating|not\s*drinking|limp|behav)/i.test(t)) {
      p.details.behavior = t;
    }
    setState(p,'await_profile');
    await ctx.reply(TXT.askProfile[p.lang]);
    return;
  }

  // 4) Alter/Gewicht/Seit-wann erkennen ‚Äî auch wenn state irrt√ºmlich idle
  if (p.state === 'await_profile' || p.state === 'idle') {
    const age = parseAge(t);
    const weight = parseWeight(t);
    const since = parseSince(t);

    if (age || weight || since) {
      p.details.age    = p.details.age    ?? age;
      p.details.weight = p.details.weight ?? weight;
      p.details.since  = p.details.since  ?? since;

      setState(p,'idle');
      const labelObj = ISSUE_LABELS[p.lastIssue];
      const label = labelObj ? (labelObj[p.lang] || labelObj.de) : (p.lastIssue || '‚Äî');

      const b = TXT.summaryBullets[p.lang];
      await ctx.reply(
        `${TXT.summaryLead[p.lang](p.name)}\n` +
        `${p.pet ? `${b.pet}${p.pet}\n` : ''}` +
        `${p.lastIssue ? `${b.issue}${label}\n` : ''}` +
        `${p.details.since ? `${b.since}${p.details.since}\n` : ''}` +
        `${p.details.pain !== undefined ? `${b.pain}${p.details.pain ? (p.lang==='en'?'yes':'ja') : (p.lang==='en'?'no':'nein')}\n` : ''}` +
        `${p.details.feverVomiting !== undefined ? `${b.fever}${p.details.feverVomiting ? (p.lang==='en'?'yes':'ja') : (p.lang==='en'?'no':'nein')}\n` : ''}` +
        `${p.details.weight ? `${b.weight}${p.details.weight} kg\n` : ''}` +
        `${p.details.age ? `${b.age}${p.details.age}\n` : ''}` +
        TXT.summaryTail[p.lang],
        { parse_mode:'Markdown' }
      );
      return;
    }
  }

  // 5) Letzter Fallback (ohne Loop)
  await ctx.reply(TXT.fallback[p.lang](p.name));
});

// ----------------- Start: Webhook l√∂schen + Polling -----------------
(async () => {
  try {
    await bot.telegram.deleteWebhook({ drop_pending_updates: true });
    const me = await bot.telegram.getMe();
    console.log('‚úÖ Verbunden als @'+me.username);
    await bot.launch({ polling:true });
    console.log('üöÄ Seelenpfote Bot l√§uft (Polling aktiv)');
  } catch (e) {
    console.error('‚ùå Startfehler:', e);
    process.exit(1);
  }
})();
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));











